#include <SPI.h>
#include <Wire.h>
#include <SFE_LSM9DS0.h>
#include <SD.h>

// SDO_XM and SDO_G are both grounded, so our addresses are:
#define LSM9DS0_XM  0x1D // Would be 0x1E if SDO_XM is LOW
#define LSM9DS0_G   0x6B // Would be 0x6A if SDO_G is LOW
// Create an instance of the LSM9DS0 library called `dof` the
// parameters for this constructor are:
// [SPI or I2C Mode declaration],[gyro I2C address],[xm I2C add.]
LSM9DS0 dof(MODE_I2C, LSM9DS0_G, LSM9DS0_XM);

//#define PRINT_CALCULATED //The mode that does calculations before posting
#define PRINT_RAW //Prints RAW data instead of calculated. This is a preset.
#define PRINT_SPEED 900 //Print every 1/10 of a second

File myFile;
const int chipSelect = 10;

void setup() {
  Serial.begin(115200); //Comment out later, for monitor connection and debugging
  uint16_t status = dof.begin();
  //Serial.print("LSM9DS0 WHO_AM_I's returned: 0x");
  Serial.println(status, HEX);
  //Serial.println("Should be 0x49D4");
  Serial.println(); //All to be removed, set for debugging and reading off the monitor
  Serial.print("Initializing SD card...");
  
  if (!SD.begin(chipSelect)) {
    Serial.println("initialization failed!");
    return;
  }
  Serial.println("initialization done.");
 
}

void loop() {
  /* // Print the heading and orientation for fun!
  printHeading((float) dof.mx, (float) dof.my);
  printOrientation(dof.calcAccel(dof.ax), dof.calcAccel(dof.ay), 
                   dof.calcAccel(dof.az)); 
  Serial.println(); */

  myFile = SD.open("test.txt", FILE_WRITE);
  printTime();
  printAccel(); // Print "A: ax, ay, az"
  printGyro();  // Print "G: gx, gy, gz"
  printMag();   // Print "M: mx, my, mz"
  myFile.close();
  
  delay(PRINT_SPEED);
}

void printTime()
{
  Serial.print(millis());
  myFile.print(millis());
  Serial.print(", ");
  myFile.print(", ");
}

void printGyro()
{
  // To read from the gyroscope, you must first call the
  // readGyro() function. When this exits, it'll update the
  // gx, gy, and gz variables with the most current data.
  dof.readGyro();
  
  // Now we can use the gx, gy, and gz variables as we please.
  // Either print them as raw ADC values, or calculated in DPS.
  //Serial.print("G: ");
#ifdef PRINT_CALCULATED
  // If you want to print calculated values, you can use the
  // calcGyro helper function to convert a raw ADC value to
  // DPS. Give the function the value that you want to convert.
  Serial.print(dof.calcGyro(dof.gx), 2);
  Serial.print(", ");
  Serial.print(dof.calcGyro(dof.gy), 2);
  Serial.print(", ");
  Serial.print(dof.calcGyro(dof.gz), 2);
  Serial.print(", ");
#elif defined PRINT_RAW
  Serial.print(dof.gx);
  myFile.print(dof.gx);
  Serial.print(", ");
  myFile.print(", ");
  Serial.print(dof.gy);
  myFile.print(dof.gy);
  Serial.print(", ");
  myFile.print(", ");
  Serial.print(dof.gz);
  myFile.print(dof.gz);
  Serial.print(", ");
  myFile.print(", ");
#endif
}

void printAccel()
{
  // To read from the accelerometer, you must first call the
  // readAccel() function. When this exits, it'll update the
  // ax, ay, and az variables with the most current data.
  dof.readAccel();
  
  // Now we can use the ax, ay, and az variables as we please.
  // Either print them as raw ADC values, or calculated in g's.
  //Serial.print("A: ");
#ifdef PRINT_CALCULATED
  // If you want to print calculated values, you can use the
  // calcAccel helper function to convert a raw ADC value to
  // g's. Give the function the value that you want to convert.
  Serial.print(dof.calcAccel(dof.ax), 2);
  Serial.print(", ");
  Serial.print(dof.calcAccel(dof.ay), 2);
  Serial.print(", ");
  Serial.print(dof.calcAccel(dof.az), 2);
  Serial.print(", ");
#elif defined PRINT_RAW 
  Serial.print(dof.ax);
  myFile.print(dof.ax);
  Serial.print(", ");
  myFile.print(", ");
  Serial.print(dof.ay);
  myFile.print(dof.ay);
  Serial.print(", ");
  myFile.print(", ");
  Serial.print(dof.az);
  myFile.print(dof.az);
  Serial.print(", ");
  myFile.print(", ");
#endif

}

void printMag()
{
  // To read from the magnetometer, you must first call the
  // readMag() function. When this exits, it'll update the
  // mx, my, and mz variables with the most current data.
  dof.readMag();
  
  // Now we can use the mx, my, and mz variables as we please.
  // Either print them as raw ADC values, or calculated in Gauss.
  //Serial.print("M: ");
#ifdef PRINT_CALCULATED
  // If you want to print calculated values, you can use the
  // calcMag helper function to convert a raw ADC value to
  // Gauss. Give the function the value that you want to convert.
  Serial.print(dof.calcMag(dof.mx), 2);
  Serial.print(", ");
  Serial.print(dof.calcMag(dof.my), 2);
  Serial.print(", ");
  Serial.prinlnt(dof.calcMag(dof.mz), 2);
#elif defined PRINT_RAW
  Serial.print(dof.mx);
  myFile.print(dof.mx);
  Serial.print(", ");
  myFile.print(", ");
  Serial.print(dof.my);
  myFile.print(dof.my);
  Serial.print(", ");
  myFile.print(", ");
  Serial.print(dof.mz);
  myFile.print(dof.mz);
  Serial.println(", ");
  myFile.println(", ");
#endif
}

// Here's a fun function to calculate your heading, using Earth's
// magnetic field.
// It only works if the sensor is flat (z-axis normal to Earth).
// Additionally, you may need to add or subtract a declination
// angle to get the heading normalized to your location.
// See: http://www.ngdc.noaa.gov/geomag/declination.shtml
void printHeading(float hx, float hy)
{
  float heading;
  
  if (hy > 0)
  {
    heading = 90 - (atan(hx / hy) * (180 / PI));
  }
  else if (hy < 0)
  {
    heading = - (atan(hx / hy) * (180 / PI));
  }
  else // hy = 0
  {
    if (hx < 0) heading = 180;
    else heading = 0;
  }
  
  Serial.print("Heading: ");
  Serial.println(heading, 2);
}

// Another fun function that does calculations based on the
// acclerometer data. This function will print your LSM9DS0's
// orientation -- it's roll and pitch angles.
void printOrientation(float x, float y, float z)
{
  float pitch, roll;
  
  pitch = atan2(x, sqrt(y * y) + (z * z));
  roll = atan2(y, sqrt(x * x) + (z * z));
  pitch *= 180.0 / PI;
  roll *= 180.0 / PI;
  
  Serial.print("Pitch, Roll: ");
  Serial.print(pitch, 2);
  Serial.print(", ");
  Serial.println(roll, 2);
}